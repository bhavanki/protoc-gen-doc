// AUTOGENERATED CODE. DO NOT EDIT.

package gendoc

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
)

var embeddedResources = map[string]string{
	"docbook.tmpl": "H4sIAAAAAAAA/+xZX2/bNhB/z6cgtLcVlTp0AYaBdoElc4uh9YK42zstnW1iFKmRlFtD8HcfKKr6L0qrHSdb8xJEvOMd78/vd7SE33yOGdqDVFTwmfeD/8pDwEMRUb6deX98XLz8yXszv8JEahoymF8hhDXVDOZ3UmgRCoZuRZjGwDXRVHAcWOkVQlkmCd8C8heUgToezVYFodEy4tJQlvlLEsPxWNtrdidEEuTfggolTcyu3ETN7gdQimwL05VxRKOZl2X+ImXMGvasybrH94Jve7y6/BoZ3SD/HVELCixS5TrWZM0AbSSJYeYRxkqHpUscMqIUJ3HHeyVA1mzrQMbEVoo0QaFgaub9WDOOEDaLCYRG+IlGejfzvveCkzVe+dfjSq/bKnoHJKqvIISl+NRcQQgD1/Iwz6PFgX3oV/l4SMCt8Z6sgblVapXsVcRB64w46ASC9VpErX21/m50w2jgtYZ3nRszyv9C5g/wqqNNSkxHF11kH3Fg1OZue2aHydaY314E2Na/hQ1Jmf6TsNR4NXrzYu1nlGVteZArZBnwaMBpJ/cmrbl6sx7N7OPAIqKEdZADsIJw3UIJ2l8/a+CG5s4P3CUoDRGqPIxg+PoSGH4aKC9zcirSfyFqRGOZxmuQj0wGPV02mqNHIoSuvRvBNaGc8m3LciX496Rjy/JNsQ4OGheduqhqFJ7Gl7u6nIvp8iSP0dvrS9DbibxkYvsP0InN99mp5DRYXgpUAzAqHobGevNHRtne5lfISwZ7YMNzGlO+ETImzImW50n+PMmfJ/n/apI3cD+FfIoeWYHc0/DrXkE8/Azvmd8fQO/E03jH8OCEZWNF45P+Hv5OQWk0Tl33oBLBFUxQfXB+Kkp5AXIq8tNikmK1QyMW6oV0pSWQmPLt8YhU/r8Lzs4z2Mx3DmGXB09hxV95jKd4+2kJarzU+3Z1FRJGpL23513bxP74jWf4vjOG6R759ZjCeeVdQHWqVFTaT6TQYhjWXy4mQpsEDivcvHjhEv9G9sQlvzvo3RBf2LW3wun+O6f1d3cu8X26PjgPv/p92SNvtX6HxrokVo3PvDmbFDZUoi8zNf/uUGOA2rPr8Ib8TPFGtW6SZJI1U8pJiramk1TfTgvkZrUjMhl3vJsWian7tJCVI44OA7b5r8V+Te7ruYLVaO4KB+UHqH8CAAD//1vksoKyGgAA",
	"html.tmpl": "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",
	"markdown.tmpl": "H4sIAAAAAAAA/+RWz0/bMBS+5694a3YYQil31PYwGKAJOkTRLmgabvvaRkrtLHaqodj/++QfiZ2mgU5Cu6yHJn7PeT++7/NLYrgvmGALlsElW5RbpIKIlNFoRICSLY4HguWDyeiMTKIojuGRzDMEtoILRgVSwaOqKghdIwyv0gy5UlFVfVylGf7Uj8P5GIZTskWlEniqKnf/41Pc3J9EAFWVQLqC4R1yTtbIQSljdZFrs1IANswto+sw1FWZZWE4pEsXIgGkS0ialU7zhZbb/RzG9m4JfgukPGW0k6VxuFQatCTDHWbgfSalB1GpBBvfMelnWOzSRQfG2uy7/NsOa2sCT7MFyUgB30lWIjy+5Kir5saY7LQxEdp4Eh0tEC+5pjInvFEOJEvXdDwo0vVGDCYjApsCV+NBbNT5yHK9b3SWW5E2z0dVNbxEvijSXItaqaAaL6pWYg+DV72J6BVxMKrG/YbwqxSzpY4pwdyCNOCAhFsyxwwkBE+CjCQk+gf2Cu2l+4EMMdTxHd/Sdwqyka3OF5Jq1yd2t6nCbK8qyuYFtDuxfVziipSZMNwqBW55Dqbv0OX0YAq0yqivHpFQ8pH0KvfIfCZcX6bldo5FH0JdlBqQ+tEKzuEhxFqA2bUeaySlKV3ve2x5/wY66xp9SOzR29ZjMUkmgYLdyHoH+UrQrrc4OAJw01wv2G9BGIDRBQHN0HYIHNJWAEPP7AwhOTh4/199PncE+tyrUM9Ji4I9dfq3zXECfUWcdyg2bFlr9AF/lchFzc4D8pxRjvW6l519IvaX+2sZvit0Af1j15W0P32dORjClgRnn4kCyTala6WAm/sGchfVdtYNa+0H4lrHa4HfOngdjnn9MeHodeczjqH7CaDJGub6g7JmY8oEcpBwcXoKEr6SHQEJ9y9iYw7YNdOuWJtu7jWX5fxFb5t9m/ZxZ68Hj5j/65zEQJamaE9lqE3zKWwRHcDZBNomx7tuqDmNeR76dHvh2vYZWq5bsS5mG1Lkze5NK5jGohWc+1ANDX8CAAD//w5KOe6/CwAA",
	"scalars.json": "H4sIAAAAAAAA/+yYQW/qOBDH73yKEadWKiB1WbbaW1sJiUNP0FPVlRwySdw1dmqPaaPVSu87vG/4PsmTCRAHHKCor+2TuEX2jO35/Wc8hocWwH8tAIB2rhWpSZFj+29ox8pGAtsX5ZRUhMYNrwameR62nJrweLpeORGK0aC/mnhicxZ2ybO85rMeLyhTMjilbVSsJob+xJOpPKSdRajbLYD/Lxqiry26K/iaYRV7bXgj9D8uQ6HXI/y8yLn0DriO/N6ggTnTnEUCOwJlShmgnKqYy7QLI4lJwqccJUGi9HoGJKaM+Byh3NnAj2/fgSdQKKsh4Shi4AYE/xdFAaQgY8525TRnwqK5AGsQzOJgwKUhZHE3IEXt5JUUXAaEqNn6MnjWnghcEqaowzJ4Lr4INzyVdgZKw5C/uq8zZkDjs+Ua4/NmdeDshVMGUkGMUz5jAnKliSt5vk+3qqa+mG6D/h7dqpNXugkl06Bw4avDN99WrmdIc89gU8Ce776tYkitckWYKkmMS/dJ2YrXkRraY4ovQNQ2lIIN1oJ952LYw/LDKsIeUxINNEMJasMZaj8nRd+C9Rekrjmqb4x5KjEGLqm8M7owydAgzJRGWF9NoihdcPtaooxJ0JhawTQsjmBOrSGkzdt7w7trM+g3aXO6/sv3HH/FOFBE1+KFFQYS13ujgtB04a4mQonaLl9IybL/AtMIKiGUkGpkhLq0u/zn8urrdY0vUCcL/oFCWfJHnma0TwD31NkvwJ+D37fRfFRDObwaThd+kN1hmXy6kXeAjJQSh/wL4NtVwPzRNLimz8uNI5MBZJszNVYbkz6qibZ4K5gxvSETpvwMgSNt0eVm4qx2J1ZNtCqtYMl+Zg0BK5NsqQPcT4adq+UjIXbb/NWJOMH1+HY0AsJXCqVgfaMKaX08bTiYj3Vcz7OsYYs6VEO6ZyV3Rw6BLdeEs0VoO17Yu3PLld8WyjtWrMkxWQDTESfNdAEGny3KqesozaXbxO2mIBw3sHt4dMuF2G17Hc5vF7eF9p2rm9Fk18+TRcXmLHZpEzGDMOhXf1CsICwQtx5bPwMAAP//dkXpJMcUAAA=",
}

func fetchResource(name string) ([]byte, error) {
	raw, ok := embeddedResources[name]
	if !ok {
		return nil, fmt.Errorf("Could not find resource for '%s'", name)
	}

	compressed, err := base64.StdEncoding.DecodeString(raw)
	if err != nil {
		return nil, err
	}

	var out bytes.Buffer
	buf := bytes.NewBuffer(compressed)
	
	r, err := gzip.NewReader(buf)
	if err != nil {
		return nil, err
	}

	if _, err := io.Copy(&out, r); err != nil {
		return nil, err
	}

	return out.Bytes(), nil
}
